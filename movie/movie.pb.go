// Code generated by protoc-gen-go. DO NOT EDIT.
// source: movie.proto

package movie

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MovieResult struct {
	Code                 int64    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Data                 []byte   `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MovieResult) Reset()         { *m = MovieResult{} }
func (m *MovieResult) String() string { return proto.CompactTextString(m) }
func (*MovieResult) ProtoMessage()    {}
func (*MovieResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{0}
}

func (m *MovieResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MovieResult.Unmarshal(m, b)
}
func (m *MovieResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MovieResult.Marshal(b, m, deterministic)
}
func (m *MovieResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MovieResult.Merge(m, src)
}
func (m *MovieResult) XXX_Size() int {
	return xxx_messageInfo_MovieResult.Size(m)
}
func (m *MovieResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MovieResult.DiscardUnknown(m)
}

var xxx_messageInfo_MovieResult proto.InternalMessageInfo

func (m *MovieResult) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *MovieResult) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MovieResult) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type MovieRequest struct {
	Method               string   `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Params               string   `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MovieRequest) Reset()         { *m = MovieRequest{} }
func (m *MovieRequest) String() string { return proto.CompactTextString(m) }
func (*MovieRequest) ProtoMessage()    {}
func (*MovieRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fde087a4194eda75, []int{1}
}

func (m *MovieRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MovieRequest.Unmarshal(m, b)
}
func (m *MovieRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MovieRequest.Marshal(b, m, deterministic)
}
func (m *MovieRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MovieRequest.Merge(m, src)
}
func (m *MovieRequest) XXX_Size() int {
	return xxx_messageInfo_MovieRequest.Size(m)
}
func (m *MovieRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MovieRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MovieRequest proto.InternalMessageInfo

func (m *MovieRequest) GetMethod() string {
	if m != nil {
		return m.Method
	}
	return ""
}

func (m *MovieRequest) GetParams() string {
	if m != nil {
		return m.Params
	}
	return ""
}

func init() {
	proto.RegisterType((*MovieResult)(nil), "movie.MovieResult")
	proto.RegisterType((*MovieRequest)(nil), "movie.MovieRequest")
}

func init() { proto.RegisterFile("movie.proto", fileDescriptor_fde087a4194eda75) }

var fileDescriptor_fde087a4194eda75 = []byte{
	// 184 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xce, 0xcd, 0x2f, 0xcb,
	0x4c, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x73, 0x94, 0xfc, 0xb9, 0xb8, 0x7d,
	0x41, 0x8c, 0xa0, 0xd4, 0xe2, 0xd2, 0x9c, 0x12, 0x21, 0x21, 0x2e, 0x96, 0xe4, 0xfc, 0x94, 0x54,
	0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x30, 0x5b, 0x48, 0x82, 0x8b, 0x3d, 0x37, 0xb5, 0xb8,
	0x38, 0x31, 0x3d, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc6, 0x05, 0xa9, 0x4e, 0x49,
	0x2c, 0x49, 0x94, 0x60, 0x56, 0x60, 0xd4, 0xe0, 0x09, 0x02, 0xb3, 0x95, 0xec, 0xb8, 0x78, 0xa0,
	0x06, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x89, 0x71, 0xb1, 0xe5, 0xa6, 0x96, 0x64, 0xe4, 0xa7,
	0x80, 0xcd, 0xe4, 0x0c, 0x82, 0xf2, 0x40, 0xe2, 0x05, 0x89, 0x45, 0x89, 0xb9, 0xc5, 0x50, 0x43,
	0xa1, 0x3c, 0x23, 0x37, 0xa8, 0xfe, 0xe0, 0xd4, 0xa2, 0xb2, 0xcc, 0xe4, 0x54, 0x21, 0x33, 0x2e,
	0x4e, 0xf7, 0xd4, 0x12, 0xa8, 0xf3, 0x84, 0xf5, 0x20, 0x5e, 0x40, 0xb6, 0x41, 0x4a, 0x08, 0x55,
	0x10, 0xa4, 0x50, 0x89, 0x21, 0x89, 0x0d, 0xec, 0x4d, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x81, 0x6e, 0xb0, 0xed, 0xf5, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MovieServiceClient is the client API for MovieService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MovieServiceClient interface {
	GetResult(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResult, error)
}

type movieServiceClient struct {
	cc *grpc.ClientConn
}

func NewMovieServiceClient(cc *grpc.ClientConn) MovieServiceClient {
	return &movieServiceClient{cc}
}

func (c *movieServiceClient) GetResult(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResult, error) {
	out := new(MovieResult)
	err := c.cc.Invoke(ctx, "/movie.MovieService/GetResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieServiceServer is the server API for MovieService service.
type MovieServiceServer interface {
	GetResult(context.Context, *MovieRequest) (*MovieResult, error)
}

func RegisterMovieServiceServer(s *grpc.Server, srv MovieServiceServer) {
	s.RegisterService(&_MovieService_serviceDesc, srv)
}

func _MovieService_GetResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieServiceServer).GetResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie.MovieService/GetResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieServiceServer).GetResult(ctx, req.(*MovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MovieService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "movie.MovieService",
	HandlerType: (*MovieServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetResult",
			Handler:    _MovieService_GetResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie.proto",
}
